/**
 * @file tcp_command_handler.cpp
 * @brief Handles commands received by the TCP_Server and supplies feedback.
 *
 * @note This file is an override of the functional example in the TCP-Server
 *       library.
 * @see https://github.com/lbussy/TCP-Server
 *
 * This file is part of WsprryPi, a project originally created from @threeme3
 * WsprryPi projet (no longer on GitHub). However, now the original code
 * remains only as a memory and inspiration, and this project is no longer
 * a deriivative work.
 *
 * This project is is licensed under the MIT License. See LICENSE.MIT.md
 * for more information.
 *
 * Copyright (C) 2023-2025 Lee C. Bussy (@LBussy). All rights reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to
 * deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

#ifndef TCP_COMMAND_HANDLER_H
#define TCP_COMMAND_HANDLER_H

// Project includes
#include "tcp_command_interface.hpp"

// Standard includes
#include <functional>
#include <string>
#include <unordered_map>

/**
 * @class TCP_Commands
 * @brief Implements command handling with dedicated methods per command.
 * @details This class dynamically maps valid commands to handler functions
 *          and provides a structured approach to command execution.
 */
class TCP_Commands : public TCP_CommandHandler
{
public:
    /**
     * @brief Constructs the TCP_Commands handler.
     * @details Initializes the list of valid commands and maps them to handlers.
     */
    TCP_Commands();

    /**
     * @brief Handles an incoming command.
     * @details Determines if the command is valid and routes it to the
     *          appropriate handler.
     *
     * @param command The command name.
     * @param arg The argument passed with the command, if any.
     * @return Response string generated by the handler.
     */
    std::string handleCommand(const std::string &command, const std::string &arg) override;

    /**
     * @brief Retrieves the list of valid commands.
     * @return A set containing valid command strings.
     */
    const std::unordered_set<std::string> &getValidCommands() const override;

private:
    /**
     * @brief Stores valid command names.
     * @details This set ensures that only predefined commands are processed.
     */
    std::unordered_set<std::string> valid_commands;

    /**
     * @brief Maps commands to their respective handler functions.
     * @details Uses function pointers to dynamically execute commands.
     */
    std::unordered_map<std::string, std::function<std::string(const std::string &)>> command_handlers;

    /**
     * @brief Initializes command handlers.
     * @details Populates the command handler map with corresponding functions.
     */
    void initializeHandlers();

    /**
     * @brief Processes a command by calling its associated handler.
     * @param command The command name.
     * @param arg The argument provided, if any.
     * @return The response from the executed command.
     */
    std::string processCommand(const std::string &command, const std::string &arg) override;

    /**
     * @name Command Handlers
     * @brief Functions responsible for handling each command.
     * @details Each function processes a specific command, either returning
     *          a default response or setting/retrieving a value.
     */
    ///@{

    /// @brief Handles the "transmit" command.
    /// @param arg The argument to set or retrieve.
    /// @return Response string.
    std::string handleTransmit(const std::string &arg);

    /// @brief Handles the "call" command.
    /// @param arg The argument to set or retrieve.
    /// @return Response string.
    std::string handleCall(const std::string &arg);

    /// @brief Handles the "grid" command.
    /// @param arg The argument to set or retrieve.
    /// @return Response string.
    std::string handleGrid(const std::string &arg);

    /// @brief Handles the "power" command.
    /// @param arg The argument to set or retrieve.
    /// @return Response string.
    std::string handlePower(const std::string &arg);

    /// @brief Handles the "freq" command.
    /// @param arg The argument to set or retrieve.
    /// @return Response string.
    std::string handleFreq(const std::string &arg);

    /// @brief Handles the "ppm" command.
    /// @param arg The argument to set or retrieve.
    /// @return Response string.
    std::string handlePPM(const std::string &arg);

    /// @brief Handles the "selfcal" command.
    /// @param arg The argument to set or retrieve.
    /// @return Response string.
    std::string handleSelfCal(const std::string &arg);

    /// @brief Handles the "offset" command.
    /// @param arg The argument to set or retrieve.
    /// @return Response string.
    std::string handleOffset(const std::string &arg);

    /// @brief Handles the "led" command.
    /// @param arg The argument to set or retrieve.
    /// @return Response string.
    std::string handleLED(const std::string &arg);

    /// @brief Handles the "port" command (no argument required).
    /// @return Response string.
    std::string handlePort();

    /// @brief Handles the "xmit" command (no argument required).
    /// @return Response string.
    std::string handleXmit();

    /// @brief Handles the "version" command (no argument required).
    /// @return Response string.
    std::string handleVersion();

    /// @brief Handles the "help" command (no argument required).
    /// @return Response string listing available commands.
    std::string handleHelp();
    ///@}
};

#endif // TCP_COMMAND_HANDLER_H
