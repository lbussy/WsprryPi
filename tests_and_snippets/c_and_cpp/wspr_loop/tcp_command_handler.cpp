/**
 * @file tcp_command_handler.cpp
 * @brief Implements command parsing and response for TCP_Server commands.
 *
 * @details
 * This is an application-specific override of the functional example in the
 * TCP-Server library. It maps incoming string commands to appropriate handler
 * functions using lambdas and std::function, allowing the server to interpret
 * and respond to client instructions.
 *
 * @see https://github.com/lbussy/TCP-Server
 *
 * This file is part of WsprryPi, a project originally created from @threeme3
 * WsprryPi projet (no longer on GitHub). However, now the original code
 * remains only as a memory and inspiration, and this project is no longer
 * a deriivative work.
 *
 * This project is is licensed under the MIT License. See LICENSE.MIT.md
 * for more information.
 *
 * Copyright (C) 2023-2025 Lee C. Bussy (@LBussy). All rights reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to
 * deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

#include "tcp_command_handler.hpp"
#include "arg_parser.hpp"
#include "version.hpp"

#include <optional>
#include <string>

/**
 * @brief Constructs the TCP_Commands object.
 *
 * @details
 * Initializes the set of valid commands and builds the mapping of command
 * strings to their respective handler functions.
 */
TCP_Commands::TCP_Commands() {
    // Create a vector of command/handler pairs.
    command_pairs = {
        {"transmit",   [this](const std::optional<std::string>& arg){ return handleTransmit(arg); }},
        {"callsign",   [this](const std::optional<std::string>& arg){ return handleCall(arg); }},
        {"gridsquare", [this](const std::optional<std::string>& arg){ return handleGrid(arg); }},
        {"powerdbm",   [this](const std::optional<std::string>& arg){ return handleDBM(arg); }},
        {"frequencies",[this](const std::optional<std::string>& arg){ return handleFreq(arg); }},
        {"txpin",      [this](const std::optional<std::string>& arg){ return handleTxPin(arg); }},
        {"ppm",        [this](const std::optional<std::string>& arg){ return handlePPM(arg); }},
        {"ntp",        [this](const std::optional<std::string>& arg){ return handleUseNTP(arg); }},
        {"offset",     [this](const std::optional<std::string>& arg){ return handleOffset(arg); }},
        {"useled",     [this](const std::optional<std::string>& arg){ return handleUseLED(arg); }},
        {"ledpin",     [this](const std::optional<std::string>& arg){ return handleLEDPin(arg); }},
        {"xmitlevel",  [this](const std::optional<std::string>& arg){ return handleXmitVal(arg); }},
        {"shutdown",   [this](const std::optional<std::string>& arg){ return handleShutdown(arg); }},
        {"shutdownpin",[this](const std::optional<std::string>& arg){ return handleShutdownPin(arg); }},
        {"version",    [this](const std::optional<std::string>& arg){ return handleVersion(arg); }},
        {"help",       [this](const std::optional<std::string>& arg){ return handleHelp(arg); }}
    };

    // Populate the vector of valid commands and the command handlers map.
    for (const auto& [cmd, handler] : command_pairs) {
        valid_commands.push_back(cmd);
        command_handlers[cmd] = handler;
    }
}

/**
 * @brief Processes a command by calling the appropriate handler function.
 *
 * @param command The command name.
 * @param arg The optional argument passed with the command.
 * @return A response string generated by the corresponding command handler.
 */
std::string TCP_Commands::processCommand(const std::string &command,
                                         const std::optional<std::string> &arg)
{
    auto it = command_handlers.find(command);
    if (it != command_handlers.end())
    {
        return it->second(arg);
    }
    return "ERROR: Unknown command '" + command + "'. Type 'help' for a list of commands.";
}

/**
 * @brief Routes an incoming command to processCommand.
 *
 * @param command The command name.
 * @param arg The optional argument for the command.
 * @return Response string from processing the command.
 */
std::string TCP_Commands::handleCommand(const std::string &command,
                                        const std::optional<std::string> &arg)
{
    return processCommand(command, arg);
}

//
// Command Handler Member Functions
//

// [Control]
std::string TCP_Commands::handleTransmit(const std::optional<std::string> &arg)
{
    return (!arg.has_value() || arg->empty())
               ? (config.transmit ? "true" : "false")
               : "Transmit set to " + *arg;
}

// [Common]
std::string TCP_Commands::handleCall(const std::optional<std::string> &arg)
{
    return (!arg.has_value() || arg->empty())
               ? config.callsign
               : "Call set to " + *arg;
}

std::string TCP_Commands::handleGrid(const std::optional<std::string> &arg)
{
    return (!arg.has_value() || arg->empty())
               ? config.grid_square
               : "Grid set to " + *arg;
}

std::string TCP_Commands::handleDBM(const std::optional<std::string> &arg)
{
    return (!arg.has_value() || arg->empty())
               ? std::to_string(config.power_dbm)
               : "Power set to " + *arg;
}

std::string TCP_Commands::handleFreq(const std::optional<std::string> &arg)
{
    return (!arg.has_value() || arg->empty())
               ? config.frequencies
               : "Frequencies set to " + *arg;
}

std::string TCP_Commands::handleTxPin(const std::optional<std::string> &arg)
{
    return (!arg.has_value() || arg->empty())
               ? std::to_string(config.tx_pin)
               : "TX Pin set to " + *arg;
}

// [Extended]
std::string TCP_Commands::handlePPM(const std::optional<std::string> &arg)
{
    return (!arg.has_value() || arg->empty())
               ? std::to_string(config.ppm)
               : "PPM set to " + *arg;
}

std::string TCP_Commands::handleUseNTP(const std::optional<std::string> &arg)
{
    return (!arg.has_value() || arg->empty())
               ? (config.use_ntp ? "true" : "false")
               : "Use NTP set to " + *arg;
}

std::string TCP_Commands::handleOffset(const std::optional<std::string> &arg)
{
    return (!arg.has_value() || arg->empty())
               ? (config.use_offset ? "true" : "false")
               : "Offset set to " + *arg;
}

std::string TCP_Commands::handleUseLED(const std::optional<std::string> &arg)
{
    return (!arg.has_value() || arg->empty())
               ? (config.use_led ? "true" : "false")
               : "Use LED set to " + *arg;
}

std::string TCP_Commands::handleLEDPin(const std::optional<std::string> &arg)
{
    return (!arg.has_value() || arg->empty())
               ? std::to_string(config.led_pin)
               : "LED Pin set to " + *arg;
}

std::string TCP_Commands::handleXmitVal(const std::optional<std::string> &arg)
{
    return (!arg.has_value() || arg->empty())
               ? std::to_string(config.power_level)
               : "Xmit set to " + *arg;
}

// [Server]
std::string TCP_Commands::handleShutdown(const std::optional<std::string> &arg)
{
    return (!arg.has_value() || arg->empty())
               ? (config.use_shutdown ? "true" : "false")
               : "Shutdown set to " + *arg;
}

std::string TCP_Commands::handleShutdownPin(const std::optional<std::string> &arg)
{
    return (!arg.has_value() || arg->empty())
               ? std::to_string(config.shutdown_pin)
               : "Shutdown Pin set to " + *arg;
}

/**
 * @brief Handles the "version" command.
 *
 * @details
 * Returns the application version string by calling `version_string()`.
 * This command does not take or require any arguments.
 *
 * @param arg Optional argument (ignored for this command).
 * @return A string representing the current application version.
 */
std::string TCP_Commands::handleVersion(const std::optional<std::string> &arg)
{
    (void)arg; // Explicitly ignore unused parameter
    return version_string();
}

/**
 * @brief Generates a help string listing all valid commands.
 *
 * @details
 * Iterates over the list of registered commands stored in `command_pairs`
 * and constructs a comma-separated string. This response is returned
 * to the client when the "help" command is issued.
 *
 * @param arg Optional argument (ignored for this command).
 * @return A formatted string listing all valid command names.
 *
 * @note
 * You can optionally exclude certain commands (e.g., "help") by
 * adding a conditional check in the loop.
 */
std::string TCP_Commands::handleHelp(const std::optional<std::string> &arg)
{
    (void)arg; // Explicitly mark argument as unused

    std::string response = "Valid commands: ";
    bool first = true;

    for (const auto &pair : command_pairs)
    {
        // Optional: skip displaying the help command itself
        // if (pair.first == "help") continue;

        if (!first)
        {
            response += ", ";
        }

        response += pair.first;
        first = false;
    }

    return response;
}
